version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: unless-stopped

  api:
    build:
      context: ./docker1
      dockerfile: Dockerfile.api
    container_name: cc-api-1
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    volumes:
      - ./docker1/api:/app/api
    ports:
      - "8000:8000"
    command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local-cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker1/grafana/provisioning:/etc/grafana/provisioning
      - ./docker1/grafana/provisioning/dashboards/prometheus-dashboard.json:/var/lib/grafana/dashboards/prometheus-dashboard.json
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: logsdb
      MYSQL_USER: loguser
      MYSQL_PASSWORD: logpass
    volumes:
      - ./docker1/mysql-init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    restart: unless-stopped

  log-consumer:
    build:
      context: ./docker1
      dockerfile: Dockerfile.consumer
    container_name: log-consumer
    depends_on:
      - kafka
      - mysql-db
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TOPIC: "logs"
      KAFKA_GROUP_ID: "mysql-log-group"
      MYSQL_HOST: "mysql-db"
      MYSQL_DB: "logsdb"
      MYSQL_USER: "loguser"
      MYSQL_PASSWORD: "logpass"
    volumes:
      - ./docker1/api/consumer_logs.py:/app/api/consumer_logs.py
      - ./docker1/wait-for-it.sh:/app/wait-for-it.sh
    working_dir: /app
    command:
      - bash
      - -c
      - |
        chmod +x /app/wait-for-it.sh
        /app/wait-for-it.sh kafka:9092 -t 60 -- \
        /app/wait-for-it.sh mysql-db:3306 -t 60 -- \
        python /app/api/consumer_logs.py
    restart: unless-stopped

volumes:
  grafana_data:
  prometheus_data:
